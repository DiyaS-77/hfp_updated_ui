    def create_hfp_profile_ui(self, device_address):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(15, 15, 15, 15)
        widget.setStyleSheet("background-color: #E6F2FA; font-family: 'Segoe UI'; font-size: 10pt;")

        self.phone_number_input = QLineEdit(widget)
        self.phone_number_input.setPlaceholderText("Enter phone number")

        self.dial_button = QPushButton("Dial", widget)
        self.answer_call_button = QPushButton("Answer", widget)
        self.hangup_button = QPushButton("Hang Up", widget)
        self.redial_button = QPushButton("Redial", widget)

        for b in [self.dial_button, self.answer_call_button, self.hangup_button, self.redial_button]:
            b.setFixedHeight(30)

        basic_layout = QVBoxLayout()
        basic_layout.addWidget(self.phone_number_input)
        for b in [self.dial_button, self.answer_call_button, self.hangup_button, self.redial_button]:
            basic_layout.addWidget(b)

        basic_group = self.create_hfp_sections("Basic Call Controls", basic_layout, parent=widget)

        adv_layout = QVBoxLayout()
        self.swap_calls_btn = QPushButton("Swap Calls", widget)
        self.hold_answer_btn = QPushButton("Hold + Answer", widget)
        self.release_answer_btn = QPushButton("Release + Answer", widget)
        self.private_chat_btn = QPushButton("Private Chat", widget)

        for b in [self.swap_calls_btn, self.hold_answer_btn, self.release_answer_btn, self.private_chat_btn]:
            adv_layout.addWidget(b)

        adv_group = self.create_hfp_sections("Advanced Call Handling", adv_layout, parent=widget)
        audio_layout = QHBoxLayout()
        self.volume_slider = QSlider(Qt.Orientation.Horizontal, widget)
        self.volume_slider.setRange(0, 100)
        audio_layout.addWidget(QLabel("Volume:", widget))
        audio_layout.addWidget(self.volume_slider)
        audio_group = self.create_hfp_sections("Audio Settings", audio_layout, parent=widget)

        dtmf_layout = QHBoxLayout()
        self.dtmf_input = QLineEdit(widget)
        self.dtmf_input.setPlaceholderText("Enter DTMF tone (0â€“9, #, *)")
        self.dtmf_send_btn = QPushButton("Send", widget)
        dtmf_layout.addWidget(self.dtmf_input)
        dtmf_layout.addWidget(self.dtmf_send_btn)
        dtmf_group = self.create_hfp_sections("DTMF Controls", dtmf_layout, parent=widget)

        for group in [basic_group, adv_group, audio_group, dtmf_group]:
            layout.addWidget(group)

        self.bluetooth_device_manager.setup_hfp_manager(device_address)

        self.dial_button.clicked.connect(
            lambda: self.bluetooth_device_manager.dial_number(device_address, self.phone_number_input.text()))
        self.answer_call_button.clicked.connect(lambda: self.bluetooth_device_manager.answer_call(device_address))
        self.hangup_button.clicked.connect(lambda: self.bluetooth_device_manager.hangup_active_call())
        self.redial_button.clicked.connect(lambda: self.bluetooth_device_manager.dial_last(device_address))
        return widget

    def create_hfp_sections(self, title, inner_layout, parent=None):
        """Create collapsible HFP section with smooth expand/collapse + fade animation and light blue theme."""
        container = QWidget(parent)
        container_layout = QVBoxLayout(container)
        container_layout.setContentsMargins(0, 0, 0, 0)
        container_layout.setSpacing(6)

        toggle = QToolButton(container)
        toggle.setText(title)
        toggle.setCheckable(True)
        toggle.setChecked(False)
        toggle.setToolButtonStyle(Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        toggle.setArrowType(Qt.ArrowType.RightArrow)
        toggle.setCursor(Qt.CursorShape.PointingHandCursor)

        toggle.setStyleSheet("""
            QToolButton {
                font-weight: bold;
                color: #00509E;
                background-color: #DCEAFB;
                border: 1px solid #A8CCE8;
                border-radius: 6px;
                padding: 6px 10px;
                text-align: left;
            }
            QToolButton:hover {
                background-color: #C6E0FA;
            }
            QToolButton:checked {
                background-color: #B0D6F9;
            }
        """)

        content = QGroupBox(container)
        content.setLayout(inner_layout)
        content.setMaximumHeight(0)
        content.setWindowOpacity(0.0)
        content.setVisible(False)
        content.setStyleSheet("""
            QGroupBox {
                border: 1px solid #00509E;
                border-radius: 6px;
                margin-top: 5px;
                background-color: #E6F2FA;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding: 3px 10px;
                color: #00509E;
                font-weight: bold;
            }
        """)

        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(QColor(0, 0, 0, 40))
        shadow.setOffset(0, 2)
        content.setGraphicsEffect(shadow)

        height_anim = QPropertyAnimation(content, b"maximumHeight")
        height_anim.setDuration(250)
        height_anim.setEasingCurve(QEasingCurve.Type.InOutCubic)

        fade_anim = QPropertyAnimation(content, b"windowOpacity")
        fade_anim.setDuration(250)
        fade_anim.setEasingCurve(QEasingCurve.Type.InOutCubic)

        animation_group = QParallelAnimationGroup()
        animation_group.addAnimation(height_anim)
        animation_group.addAnimation(fade_anim)

        def toggle_section(checked):
            content.setVisible(True)
            if checked:
                height_anim.setStartValue(0)
                height_anim.setEndValue(content.sizeHint().height())
                fade_anim.setStartValue(0.0)
                fade_anim.setEndValue(1.0)
                toggle.setArrowType(Qt.ArrowType.DownArrow)
            else:
                height_anim.setStartValue(content.height())
                height_anim.setEndValue(0)
                fade_anim.setStartValue(1.0)
                fade_anim.setEndValue(0.0)
                toggle.setArrowType(Qt.ArrowType.RightArrow)

                def hide_after():
                    content.setVisible(False)
                    animation_group.finished.disconnect(hide_after)

                animation_group.finished.connect(hide_after)

            animation_group.start()

        toggle.toggled.connect(toggle_section)

        container_layout.addWidget(toggle)
        container_layout.addWidget(content)
        return container
